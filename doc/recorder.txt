*recorder.txt*           For NVIM v0.8.0          Last change: 2023 January 10

==============================================================================
Table of Contents                                 *recorder-table-of-contents*

1. nvim-recorder                                      |recorder-nvim-recorder|
  - Features                                               |recorder-features|
  - Setup                                                     |recorder-setup|
  - Usage                                                     |recorder-usage|
  - Status Line Components                   |recorder-status-line-components|
  - About me                                               |recorder-about-me|

==============================================================================
1. nvim-recorder                                      *recorder-nvim-recorder*

Enhance the usage of macros in Neovim.


- |recorder-features|
- |recorder-setup|
    - |recorder-installation|
    - |recorder-configuration|
- |recorder-usage|
    - |recorder-basics|
    - |recorder-macro-breakpoints|
- |recorder-status-line-components|
- |recorder-about-me|
    <!--toc:end-->


FEATURES                                                   *recorder-features*


- **Simplified controls**: One key to start and stop recording, a second key for playing the macro. Instead of `qa … q @a @@`, you just do `q … q Q Q`
- **|recorder-macro-breakpoints|** for easier debugging of macros. Breakpoints can also be set after the recording, and are ignored when triggering a macro with a count.
- **Status line components**: Particularly useful if you use `cmdheight=0`.
- Various quality-of-life features like notifications with macro content, the ability to cancel a recording, or a command to edit macros.
- Uses up-to-date nvim features like `vim.ui.input` or `vim.notify`. This means you can get confirmation notices with plugins like nvim-notify <https://github.com/rcarriga/nvim-notify>.
- Written 100% in lua. Lightweight (~250 LoC).


SETUP                                                         *recorder-setup*

INSTALLATION ~

>
    -- packer
    use {
        "chrisgrieser/nvim-recorder",
        config = function() require("recorder").setup() end,
    }
    
    -- lazy.nvim
    {
        "chrisgrieser/nvim-recorder",
        config = function() require("recorder").setup() end,
    },
<


Calling `setup()` is **required**.

CONFIGURATION ~

>
    -- default values
    require("recorder").setup {
        -- Named registers where macros are saved. The first register is the default register/macro-slot used after startup. (Remember that vim saves macros in registers.)
        slots = {"a", "b"},
    
        -- Default keymaps
        mapping = {
            startStopRecording = "q",
            playMacro = "Q",
            editMacro = "cq",
            switchSlot = "<C-q>",
            addBreakPoint = "#",
        }
    
        -- clear all macros (registers) on startup
        clear = false,
    
        -- log level used for any notification. Mostly relevant for nvim-notify. (Note that by default, nvim-notify only shows levels 2 and higher.)
        logLevel = vim.log.levels.INFO,
    
        -- (experimental) if true, nvim-recorder and dap will use shared keymaps:
        -- 1) `addBreakPoint` will map to `dap.toggle_breakpoint()` outside
        -- a recording. During a recording, it will add a macro breakpoint instead.
        -- 2) `playMacro` will map to `dap.continue()` if there is at least one
        -- dap-breakpoint. If there is no dap breakpoint, will play the current
        -- macro-slot instead.
        dapSharedKeymaps = false,
    }
<


USAGE                                                         *recorder-usage*

BASICS ~


- `startStopRecording`: starts recording. Saves automatically to the current macro slot, so you do not need to specify a register. Press again to end the recording.
- `switchSlot`: cycles through the registers you specified in the configuration, and also show a notice with that macro’s content.
- `editMacro`: lets you modify the macro recorded in the active slot.
- `playMacro`: plays the macro in the current slot, no need to specify a register.



  **Note** For recursive macros (playing a macro inside a macro), you can still
  use the default command `@a`, where `a` is the name of the macro slot
  (register).


MACRO BREAKPOINTS ~

_nvim-recorder_ allows you to set breakpoints in your macros which can be
helpful for debugging macros. Breakpoints are automatically ignored when you
trigger the macro with a count.

**Setting Breakpoints** 1. _During a recording_ press the `addBreakPoint` key
(default: `#`) in normal mode. 2. _After a recording_ use `editMacro` and add
(or remove) the `#` manually.

**Playing Macros with Breakpoints** Using the `playMacro` key, the macro
automatically stops at the next breakpoint. The next time you press
`playMacro`, the next segment of the macro is played.

Starting a new recording, editing a macro, or switching macro slot all reset
the sequence, meaning that `playMacro` starts from the beginning again.


  **Note** You can do other things in between playing segments of the macro, like
  moving a few characters to the left or right. That way you can also use
  breakpoints to manually correct irregularities.


**Ignoring Breakpoints** When you play the macro with a _count_ (for example
`50Q`), breakpoints are automatically ignored. _Tip_: add a count of 1 (`1Q`)
to play a macro once and ignore any breakpoints.

**Shared Keybindings with nvim-dap** If you are also using nvim-dap
<https://github.com/mfussenegger/nvim-dap>, you can use `dapSharedKeymaps =
true` to set up shared keybindings: 1. `addBreakPoint` will map to
`dap.toggle_breakpoint()` outside a recording. During a recording, it will add
a macro breakpoint instead. 2. `playMacro` will map to `dap.continue()` if
there is at least one dap-breakpoint. If there is no dap breakpoint, will play
the current macro-slot instead.

Note that this feature is experimental, since the respective API from nvim-dap
is non-public and can be changed without deprecation notice
<https://github.com/mfussenegger/nvim-dap/discussions/810#discussioncomment-4623606>.

STATUS LINE COMPONENTS                       *recorder-status-line-components*

>
    -- indicates whether you are currently recording. Useful if you are using `cmdheight=0`, where recording-status is not visible.
    require("recorder").recordingStatus()
    
    -- displays non-empty macro-slots (registers) and indicates the selected ones. Only displayed when *not* recording. Slots with breakpoints get an extra `#`.
    -- Recommendation: use with the config `clear = true`
    require("recorder").displaySlots()
<


Example for adding the status line components to lualine
<https://github.com/nvim-lualine/lualine.nvim>:

>
    -- Tip: put the components in different status line segments so they have different color, making the recording status more distinguishable
    lualine_y = {
        { require("recorder").displaySlots },
    },
    lualine_z = {
        { require("recorder").recordingStatus },
    },
<


ABOUT ME                                                   *recorder-about-me*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

**Profiles** - Discord <https://discordapp.com/users/462774483044794368/> -
Academic Website <https://chris-grieser.de/> - GitHub
<https://github.com/chrisgrieser/> - Twitter <https://twitter.com/pseudo_meta>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser> -
LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
